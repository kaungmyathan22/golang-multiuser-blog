version: '3'

env:
  CGO_ENABLED: 0
  GOOS: '{{default "darwin" .GOOS}}'
  GOARCH: '{{default "arm64" .GOARCH}}'

vars:
  APP_NAME: golang-multiuser-blog
  BUILD_DIR: ./bin
  SERVER_DIR: ./server

tasks:
  # Default task - shows available commands
  default:
    desc: 'Show available commands'
    silent: true
    cmds:
      - task --list

  # Setup and installation tasks
  install:
    desc: 'Install project dependencies and tools'
    cmds:
      - echo "Installing Go dependencies..."
      - cd {{.SERVER_DIR}} && go mod download
      - echo "Installing air for hot reload..."
      - go install github.com/cosmtrek/air@latest
      - echo "Installing golangci-lint for code quality..."
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - echo "Setup complete!"

  # Clean tasks
  clean:
    desc: 'Clean build artifacts and temporary files'
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -rf {{.SERVER_DIR}}/tmp
      - echo "Cleaned build artifacts"

  # Development with hot reload
  dev:
    desc: 'Run server with hot reload'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - air -c .air.toml

  # Build tasks
  build:
    desc: 'Build server'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - mkdir -p ../{{.BUILD_DIR}}
      - go build -o ../{{.BUILD_DIR}}/{{.APP_NAME}} ./cmd/server

  # Run built binary
  run:
    desc: 'Run built server'
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.APP_NAME}}

  # Test tasks
  test:
    desc: 'Run all tests'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - go test -v ./...

  test:coverage:
    desc: 'Run tests with coverage report'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated coverage.html"

  test:watch:
    desc: 'Run tests with file watching'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - air -c .air.test.toml

  # Code quality tasks
  lint:
    desc: 'Run linter'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - golangci-lint run ./...

  fmt:
    desc: 'Format code'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - go fmt ./...
      - echo "Code formatted"

  # Database tasks
  migrate:up:
    desc: 'Run database migrations'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - echo "Running database migrations..."
      - ./scripts/migrate.sh up

  migrate:down:
    desc: 'Rollback database migrations'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - echo "Rolling back database migrations..."
      - ./scripts/migrate.sh down

  # Docker tasks
  docker:build:
    desc: 'Build Docker image'
    cmds:
      - docker build -f docker/Dockerfile -t {{.APP_NAME}} .

  docker:run:
    desc: 'Run with Docker'
    deps: [docker:build]
    cmds:
      - docker run -p 8080:8080 {{.APP_NAME}}

  # Utility tasks
  mod:tidy:
    desc: 'Tidy Go modules'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - go mod tidy
      - echo "Go modules tidied"

  gen:
    desc: 'Run code generation'
    dir: '{{.SERVER_DIR}}'
    cmds:
      - go generate ./...
      - echo "Code generation complete"
